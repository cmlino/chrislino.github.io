{"version":3,"sources":["index.js"],"names":["Square","props","className","value","onClick","onMouseUp","onMouseDown","onMouseOver","Board","square_board","shift","j","row","i","push","state","squares","xStart","yStart","isWalls","this","setState","queue","paths","Map","y","x","set","console","log","search","setInterval","o","length","slice","next","get","split","find_path","clearInterval","isSet","resetState","dist_origin","dist","dist_end","Math","abs","open_list","sort","a","b","isMouseDown","undefined","moveStart","clas","class","addWall","toggleMouseDown","toggleMouseUp","items","renderSquare","board_","entries","index","href","toggleWall","toggleWeight","BFS","A_star","status","React","Component","Game","domContainer","document","querySelector","ReactDOM","render"],"mappings":"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","file":"static/js/main.f9df314d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport update from 'immutability-helper'\r\nimport { ControlLabel } from 'react-bootstrap';\r\nfunction Square(props) {\r\n    return (\r\n      <button className={props.value + ' square'} onClick={props.onClick} onMouseUp={props.onMouseUp} onMouseDown={props.onMouseDown} onMouseOver={props.onMouseOver}></button>\r\n    );\r\n  }\r\n\r\nclass Board extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        var square_board = [[]];\r\n        square_board.shift();\r\n        for(var j = 0; j < 20; j++){  \r\n            var row = [];\r\n            for(var i = 0; i < 37; i++){\r\n                if(i === 22 && j === 7)\r\n                    row.push('green')\r\n                else \r\n                    row.push(null);\r\n            }\r\n            square_board.push(row);\r\n        }\r\n        var xStart = 5;\r\n        var yStart = 5;\r\n        var isWalls = true;\r\n        square_board[xStart][yStart] = 'start';\r\n        this.state = {\r\n            squares: square_board,\r\n            xStart: xStart,\r\n            yStart: yStart,\r\n            isWalls: isWalls,\r\n        };\r\n    }\r\n    resetState(){\r\n        var squares = [[]];\r\n        squares.shift();\r\n        for(var j = 0; j < 20; j++){  \r\n            var row = [];\r\n            for(var i = 0; i < 37; i++){\r\n                if(i === 22 && j === 7)\r\n                    row.push('green');\r\n                if( i===5 && j ===5)\r\n                    row.push('start');\r\n                else \r\n                    row.push(null);\r\n            }\r\n            \r\n            squares.push(row);\r\n        }\r\n        this.setState({squares: squares, xStart: 5, yStart: 5});\r\n    }\r\n\r\n    BFS(i,j) {\r\n        var queue = [[]];\r\n        queue.push([i,j]);\r\n        queue.shift();\r\n        var paths = new Map();\r\n        let y = queue[0][0];\r\n        let x = queue[0][1]\r\n        paths.set(y+','+x,[0,null]);\r\n        console.log(queue[0]);\r\n        var search = setInterval(() => {\r\n            var squares = [];\r\n            for (var o = 0; o < this.state.squares.length; o++)\r\n                squares = this.state.squares.slice();\r\n            //copy only y+1, y-1, x+1, x-1\r\n            //how do i set state???? - coyp the \r\n            try{\r\n                y = queue[0][0];\r\n                x = queue[0][1];\r\n                if(queue.length !== 0 && !(y === 7 && x === 22)) {\r\n                    if(squares[y][x] !== 'X') { \r\n                        let dist = 1;\r\n                        var isSet=0;\r\n                        if(squares[y][x] == 'X'){\r\n                            queue.shift();\r\n                            return;\r\n                        }\r\n                        if(squares[y][x] == 'weight') {\r\n                            squares[y][x] = 'wasweight';\r\n                            queue.push([y,x]);\r\n                            this.setState({squares: squares}); \r\n                            return;\r\n                        }\r\n                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n                        if(x < 36 && squares[y][x+1] !== 'X' && squares[y][x+1] !== 'wall' && squares[y][x+1] !== 'weight real_weight') {\r\n                            queue.push([y,x+1]);\r\n                            paths.set(y+','+(x+1),[dist, y+','+x]);\r\n                        }\r\n                        if(x > 0 && squares[y][x-1] !== 'X' && squares[y][x-1] !== 'wall' && squares[y][x-1] !== 'weight real_weight'){\r\n                            queue.push([y,x-1]);\r\n                            paths.set(y+','+(x-1),[dist, y+','+x]);\r\n                        }\r\n\r\n                        if(y < 19 && squares[y+1][x] !== 'X' && squares[y+1][x] !== 'wall' && squares[y+1][x] !== 'weight real_weight'){\r\n                            queue.push([y+1,x]);\r\n                            paths.set((y+1)+','+x,[dist, y+','+x]);\r\n                        }\r\n\r\n                        if(y > 0 && squares[y-1][x] !== 'X' && squares[y-1][x] !== 'wall' && squares[y-1][x] !== 'weight real_weight'){\r\n                            queue.push([y-1,x]);\r\n                            paths.set((y-1)+','+x,[dist, y+','+x]);\r\n                        }\r\n                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n                        if( x < 36 && squares[y][x+1] == 'weight real_weight') {\r\n                            squares[y][x+1] = 'weight';\r\n                            queue.push([y,x]);\r\n                            squares[y][x] = null;\r\n                            isSet =1;\r\n                        //    paths.set(y+','+(x+1),[dist, y+','+x]); \r\n                        }\r\n                        if(x > 0 && squares[y][x-1] == 'weight real_weight'){\r\n                            squares[y][x-1] = 'weight';\r\n                            queue.push([y,x]);\r\n                            squares[y][x] = null;\r\n                            isSet =1;\r\n                      //      paths.set(y+','+(x-1),[dist, y+','+x]);\r\n                        }\r\n                        if(y < 19 && squares[y+1][x] == 'weight real_weight'){\r\n                            squares[y+1][x] = 'weight';\r\n                            queue.push([y,x]);\r\n                            squares[y][x] = null;\r\n                            isSet =1;\r\n                        //    paths.set((y+1)+','+x,[dist, y+','+x]);\r\n                        }\r\n                        if(y > 0 && squares[y-1][x] == 'weight real_weight'){\r\n                            squares[y-1][x] = 'weight';\r\n                            queue.push([y,x]);\r\n                            squares[y][x] = null;\r\n                            isSet =1;\r\n                        //    paths.set((y-1)+','+x,[dist, y+','+x]);\r\n                        }\r\n                        if(!isSet)\r\n                            squares[y][x] = 'X';\r\n                        squares[i][j] = 'start';\r\n                        this.setState({squares: squares});\r\n                    }\r\n                    queue.shift();\r\n                } else {\r\n                    let next = paths.get(7+','+22)[1].split(',');\r\n                    y = next[0];\r\n                    x = next[1];\r\n                    squares[y][x] = 'visited';\r\n                    var find_path = setInterval(() => { \r\n                        if(next !== null && !(x == j && y == i)) {\r\n                        squares[y][x] = 'visited';\r\n                        next = paths.get(y+','+x)[1];\r\n                        if(next!=null){\r\n                            next = next.split(',');\r\n                            y = next[0];\r\n                            x = next[1];\r\n                        }\r\n                        this.setState({squares: squares}); \r\n                        } else {\r\n                        clearInterval(find_path);\r\n                        }\r\n                    clearInterval(search);\r\n                    }, 10);\r\n                }\r\n            } catch {\r\n                clearInterval(find_path);\r\n                clearInterval(search);\r\n                this.resetState();\r\n            }\r\n        }, 0);\r\n    }\r\n    A_star(i,j){\r\n        var dist_origin;\r\n        var dist_end = Math.abs(7-j) + Math.abs(22-i);\r\n        var dist;\r\n        var open_list = [[]];\r\n        open_list.shift();\r\n        open_list.push([i,j,dist_end]);\r\n        var paths = new Map();\r\n        paths.set(i+','+j,[0,null]);\r\n        let x = i;\r\n        let y = j;\r\n        //for all the nodes next to the current node\r\n            //if cur node is end node animate path back\r\n            //calculate dist_origin + dist_end, add vals to open_list also insert paths into map like for \r\n            //sort open_list and choose lowest val for next node\r\n            var search = setInterval(() => {\r\n                var squares = [];\r\n                for (var o = 0; o < this.state.squares.length; o++)\r\n                    squares = this.state.squares.slice();\r\n                    \r\n                try{\r\n                    y = open_list[0][0];\r\n                    x = open_list[0][1];\r\n                    if(squares[y][x] == 'X'){\r\n                        open_list.shift();\r\n                        return;\r\n                    }\r\n                    if(open_list.length > 0 && !(y === 7 && x === 22)) {\r\n                        open_list.shift();\r\n                        if(squares[y][x] !== 'X') { \r\n                            if(x < 36 && squares[y][x+1] !== 'X' && squares[y][x+1] !== 'wall') {\r\n                                dist_origin = Math.abs(y-j) + Math.abs(x+1-i);\r\n                                dist_end = Math.abs(7-y) + Math.abs(22-(x+1));\r\n                                dist = dist_origin + dist_end;\r\n                                open_list.push([y,x+1,dist]);\r\n                                paths.set(y+','+(x+1),[dist, y+','+x]);\r\n                            }\r\n                            \r\n                            if(x > 0 && squares[y][x-1] !== 'X' && squares[y][x-1] !== 'wall'){\r\n                                dist_origin = Math.abs(y-j) + Math.abs(x-1-i);\r\n                                dist_end = Math.abs(7-y) + Math.abs(22-(x-1));\r\n                                dist = dist_origin + dist_end;\r\n                                open_list.push([y,x-1,dist]);\r\n                                paths.set(y+','+(x-1),[dist, y+','+x]);\r\n                            }\r\n    \r\n                            if(y < 19 && squares[y+1][x] !== 'X' && squares[y+1][x] !== 'wall'){\r\n                                dist_origin = Math.abs(y+1-j) + Math.abs(x-i);\r\n                                dist_end = Math.abs(7-(y+1)) + Math.abs(22-x);\r\n                                dist = dist_origin + dist_end;\r\n                                open_list.push([y+1,x,dist]);\r\n                                paths.set((y+1)+','+x,[dist, y+','+x]);\r\n                            }\r\n    \r\n                            if(y > 0 && squares[y-1][x] !== 'X' && squares[y-1][x] !== 'wall'){\r\n                                dist_origin = Math.abs(y-1-j) + Math.abs(x-i);\r\n                                dist_end = Math.abs(7-(y-1)) + Math.abs(22-x);\r\n                                dist = dist_origin + dist_end;\r\n                                open_list.push([y-1,x,dist]);\r\n                                paths.set((y-1)+','+x,[dist, y+','+x]);\r\n                            }\r\n                            \r\n                            open_list.sort(function(a,b){\r\n                                return a[2]-b[2];\r\n                            });\r\n                            squares[y][x] = 'X';\r\n                            squares[i][j] = 'start';\r\n                            this.setState({squares: squares});\r\n                        }\r\n                    } else {\r\n                        let next = paths.get(7+','+22)[1].split(',');\r\n                        y = next[0];\r\n                        x = next[1];\r\n                        squares[y][x] = 'visited';\r\n                        var find_path = setInterval(() => { \r\n                            if(next !== null && !(x == j && y == i)) {\r\n                            squares[y][x] = 'visited';\r\n                            next = paths.get(y+','+x)[1];\r\n                            if(next!=null){\r\n                                next = next.split(',');\r\n                                y = next[0];\r\n                                x = next[1];\r\n                            }\r\n                            this.setState({squares: squares}); \r\n                            } else {\r\n                            clearInterval(find_path);\r\n                            }\r\n                        clearInterval(search);\r\n                        }, 10);\r\n                    }\r\n                } catch {\r\n                    clearInterval(find_path);\r\n                    clearInterval(search);\r\n                    this.resetState();\r\n                }\r\n            }, 5);\r\n    }\r\n    toggleWall(){\r\n        this.isWalls = true;\r\n    }\r\n    toggleWeight(){\r\n        this.isWalls = false;\r\n    }\r\n    addWall(i,j){\r\n        console.log(this.isWalls);\r\n        if(this.isMouseDown){\r\n            var squares = [];\r\n            for (var o = 0; o < this.state.squares.length; o++)\r\n                squares = this.state.squares.slice();\r\n            if(squares[i][j] == 'green' || squares[i][j] == 'start'){\r\n            } else if (!this.isWalls && this.isWalls!=undefined){\r\n                squares[i][j] = 'weight real_weight';\r\n            } else {\r\n                squares[i][j] = 'wall';\r\n            }\r\n            this.setState({squares: squares});\r\n        }\r\n    }\r\n    toggleMouseDown(){\r\n        this.isMouseDown = true;\r\n    }\r\n    toggleMouseUp(){\r\n        this.isMouseDown = false;\r\n    }\r\n    moveStart(i,j){\r\n        var squares = [];\r\n        for (var o = 0; o < this.state.squares.length; o++)\r\n            squares = this.state.squares.slice();\r\n        var xStart = this.state.xStart;\r\n        var yStart = this.state.yStart;\r\n        squares[xStart][yStart] = null;\r\n        squares[i][j] = 'start';\r\n        xStart = i;\r\n        yStart = j;\r\n        this.setState({squares: squares, xStart: xStart, yStart: yStart})\r\n    }   \r\n    renderSquare(i,j) {\r\n        return (\r\n        <Square\r\n            value={this.state.squares[i][j]}\r\n            onClick={() => this.moveStart(i,j)}\r\n            clas={this.state.class}\r\n            onMouseOver={() => this.addWall(i,j)}\r\n            onMouseDown={() => this.toggleMouseDown()}\r\n            onMouseUp={() => this.toggleMouseUp()}\r\n            isMouseDown ={this.isMouseDown}\r\n            isWalls={this.isWalls}\r\n        />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let status;\r\n        \r\n        const items = [[]];\r\n        for(var x = 0; x < 20; x++) {\r\n            var row = [];\r\n            for(var j = 0; j < 37; j++){\r\n                row.push(this.renderSquare(x,j));\r\n                if(j===8)\r\n                    items.push(row);\r\n            }\r\n            \r\n        }\r\n        const board_ = [];\r\n        for (const [index] of items.entries()) {\r\n            board_.push(<div className=\"board-row\">{items[index]}</div>);\r\n        }\r\n\r\n        return (\r\n        \r\n        <div>\r\n        <nav className=\"navbar navbar-dark dark\">\r\n            <a class=\"navbar-brand\" href=\"#\">Pathfinder</a>\r\n            <button className=\"navbar-toggler reset first\"onClick={() => this.toggleWall()}> Add Walls</button>\r\n            <button className=\"navbar-toggler reset\"onClick={() => this.toggleWeight()}> Add Weights</button>\r\n            <button className=\"navbar-toggler reset\"onClick={() => this.BFS(this.state.xStart,this.state.yStart)}> Dijsktra's</button>\r\n            <button className=\"navbar-toggler  reset\"onClick={() => this.A_star(this.state.xStart,this.state.yStart)}> A*</button>\r\n            <button className=\"navbar-toggler reset last\"onClick={() => this.resetState()}> Reset Board</button>\r\n        </nav>\r\n             \r\n        <div className=\"status\">{status}</div>\r\n            {board_}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\nrender() {\r\n    return (\r\n    <div className=\"game\">\r\n        <div className=\"game-board\">\r\n        <Board />\r\n        </div>\r\n        <div className=\"game-info\">\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\n// ========================================\r\nconst domContainer = document.querySelector('#root');\r\nReactDOM.render(<Game />,domContainer);\r\n"],"sourceRoot":""}